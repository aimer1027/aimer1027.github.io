{"name":"Aimer1027.GitHub.io.leetcodes.Maximum-Depth-of-Binary-Tree","tagline":"aimer's blog","body":"Maximum Depth of Binary Tree My Submissions Question\r\n\r\nTotal Accepted: 102492 Total Submissions: 221648 Difficulty: Easy\r\nGiven a binary tree, find its maximum depth.\r\n\r\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\r\n\r\nSubscribe to see which companies asked this question\r\n\r\nsource code\r\n````c++\r\n/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    int maxDepth(TreeNode* root) {\r\n       \r\n       int left , right ;\r\n       \r\n       left  = 0 ;\r\n       right = 0 ;\r\n       \r\n       if(root == NULL)\r\n            return 0 ;\r\n            \r\n       if(root->left != NULL)\r\n          left = maxDepth(root->left) ;\r\n       if(root->right != NULL)\r\n          right = maxDepth(root->right) ;\r\n        \r\n        return 1+ (left >= right? left : right) ;    \r\n    }\r\n};\r\n````","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}